/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package sistemarlf.visualizacao.cliente;

import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.InternalFrameAdapter;
import javax.swing.event.InternalFrameEvent;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import sistemarlf.Principal;
import sistemarlf.modelo.entidades.cliente.Cliente;
import sistemarlf.modelo.oad.cliente.OADCliente;
import sistemarlf.visualizacao.pedido.FormCadPedido;
import uteis.grid.tablemodel.MyTableModel;

/**
 *
 * @author Rosaine e Jhonnatan
 */
public class FormConsultaCliente extends javax.swing.JPanel {

    FormCadPedido telaChamadora;
    JInternalFrame telaCarregada;
    MyTableModel<Cliente> tmConsultaCliente;
    List<Cliente> clientes;
    private Cliente clienteSelecionado;

    private FormConsultaCliente() {
        super();
        initComponents();
        this.btnExcluir.setEnabled(false);
        this.btnAlterar.setEnabled(false);
        this.gridConsulta.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent lse) {
                if (!gridConsulta.getSelectionModel().isSelectionEmpty()) {
                    clienteSelecionado = clientes.get(gridConsulta.getSelectedRow());
                } else {
                    clienteSelecionado = null;
                }
                btnExcluir.setEnabled(clienteSelecionado instanceof Cliente);
                btnAlterar.setEnabled(clienteSelecionado instanceof Cliente);
            }
        });
        this.gridConsulta.addFocusListener(new FocusAdapter() {
            @Override
            public void focusLost(FocusEvent fe) {
                gridConsulta.clearSelection();
            }
        });
        this.gridConsulta.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent me) {
                if (me.getButton() == MouseEvent.BUTTON3) {
                    gridConsulta.clearSelection();
                }
                super.mouseClicked(me);
            }
        });

        /*
         * VERIFICAÇÃO DOS CAMPOS DE PESQUISA PARA HABILITAR/DESABILITAR O 
         * BOTÃO DE "PESQUISAR".
         */
        this.txtCodCliente.addCaretListener(new CaretListener() {
            @Override
            public void caretUpdate(CaretEvent ce) {
                pesquisaCliente((!txtCodCliente.getText().trim().isEmpty()) ? Integer.parseInt(txtCodCliente.getText().trim()) : null);
            }
        });
        this.txtNomeCliente.addCaretListener(new CaretListener() {
            @Override
            public void caretUpdate(CaretEvent ce) {
                pesquisaCliente((!txtNomeCliente.getText().trim().isEmpty()) ? txtNomeCliente.getText().trim() : null);
            }
        });
    }

    /**
     * Creates new form ProtCadastraCliente
     */
    public FormConsultaCliente(JInternalFrame jfCarregada, FormCadPedido jfChamadora, Cliente cliente) {
        this();
        telaCarregada = jfCarregada;
        telaChamadora = jfChamadora;

        consultarCliente(cliente);
        if (telaChamadora != null) {
            txtNomeCliente.setText(cliente.getNomeRazaoSocial());
            this.btnSelecionar.setEnabled(true);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        txtCodCliente = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        txtNomeCliente = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        gridConsulta = new javax.swing.JTable();
        btnNovo = new javax.swing.JButton();
        btnSelecionar = new javax.swing.JButton();
        btnAlterar = new javax.swing.JButton();
        btnExcluir = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();

        setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        setAutoscrolls(true);
        setMaximumSize(new java.awt.Dimension(0, 0));
        setMinimumSize(new java.awt.Dimension(700, 500));
        setName("ProtCadastraCliente"); // NOI18N
        setPreferredSize(new java.awt.Dimension(700, 500));
        setVerifyInputWhenFocusTarget(false);

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("sistemarlf/visualizacao/produto/Bundle"); // NOI18N
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("FormConsultaProduto.jPanel1.border.title"))); // NOI18N
        jPanel1.setMaximumSize(new java.awt.Dimension(750, 400));
        jPanel1.setPreferredSize(new java.awt.Dimension(750, 300));

        jLabel4.setText(bundle.getString("FormConsultaProduto.jLabel4.text")); // NOI18N

        txtCodCliente.setText(bundle.getString("FormConsultaProduto.txtCodProdPedido.text")); // NOI18N
        txtCodCliente.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCodClienteKeyReleased(evt);
            }
        });

        jLabel10.setText(bundle.getString("FormConsultaProduto.jLabel10.text")); // NOI18N

        txtNomeCliente.setText(bundle.getString("FormConsultaProduto.txtDescProdPedido.text")); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addGap(4, 4, 4)
                .addComponent(txtCodCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtNomeCliente)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(jLabel4))
                    .addComponent(txtCodCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel10))
                    .addComponent(txtNomeCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel2.setLayout(new java.awt.BorderLayout());

        gridConsulta.setAutoCreateRowSorter(true);
        gridConsulta.setModel(this.construirTableModel());
        gridConsulta.setAutoscrolls(false);
        gridConsulta.setEditingRow(0);
        gridConsulta.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        gridConsulta.getTableHeader().setReorderingAllowed(false);
        gridConsulta.setCellSelectionEnabled(false);
        gridConsulta.setRowSelectionAllowed(true);
        gridConsulta.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                gridConsultaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(gridConsulta);
        gridConsulta.getColumnModel().getColumn(0).setPreferredWidth(20);
        gridConsulta.getColumnModel().getColumn(1).setPreferredWidth(300);
        gridConsulta.getColumnModel().getColumn(2).setPreferredWidth(20);
        gridConsulta.getColumnModel().getColumn(3).setPreferredWidth(20);
        gridConsulta.getColumnModel().getColumn(4).setPreferredWidth(20);

        jPanel2.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        btnNovo.setText(bundle.getString("FormConsultaProduto.btnNovo.text")); // NOI18N
        btnNovo.setFocusable(false);
        btnNovo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnNovo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnNovo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNovoActionPerformed(evt);
            }
        });

        java.util.ResourceBundle bundle1 = java.util.ResourceBundle.getBundle("sistemarlf/visualizacao/cliente/Bundle"); // NOI18N
        btnSelecionar.setText(bundle1.getString("FormConsultaCliente.btnSelecionar.text")); // NOI18N
        btnSelecionar.setEnabled(false);
        btnSelecionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelecionarActionPerformed(evt);
            }
        });

        btnAlterar.setText(bundle.getString("FormConsultaProduto.btnAlterar.text")); // NOI18N
        btnAlterar.setFocusable(false);
        btnAlterar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnAlterar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnAlterar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAlterarActionPerformed(evt);
            }
        });

        btnExcluir.setText(bundle.getString("FormConsultaProduto.btnExcluir.text")); // NOI18N
        btnExcluir.setFocusable(false);
        btnExcluir.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnExcluir.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 678, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 678, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnSelecionar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnNovo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnExcluir)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnAlterar))
                    .addComponent(jSeparator2))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 352, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnAlterar)
                    .addComponent(btnExcluir)
                    .addComponent(btnNovo)
                    .addComponent(btnSelecionar))
                .addContainerGap())
        );

        jPanel1.getAccessibleContext().setAccessibleName(bundle1.getString("FormConsultaCliente.jPanel1.AccessibleContext.accessibleName")); // NOI18N

        getAccessibleContext().setAccessibleName(bundle.getString("FormConsultaProduto.AccessibleContext.accessibleName")); // NOI18N
    }// </editor-fold>//GEN-END:initComponents

    private void btnAlterarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAlterarActionPerformed
        if (this.clienteSelecionado instanceof Cliente) {
            Principal.TELA_PRINCIPAL.abrirJanelaCliente(this.telaCarregada, this.clienteSelecionado, true).addInternalFrameListener(new InternalFrameAdapter() {
                @Override
                public void internalFrameClosed(InternalFrameEvent ife) {
                    atualizarGridClientes();
                    super.internalFrameClosed(ife);
                }
            });
        } else {
            JOptionPane.showInputDialog("Selecione um cliente para efetivar  a operação");
        }
    }//GEN-LAST:event_btnAlterarActionPerformed

    private void btnExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirActionPerformed
        if (this.clienteSelecionado instanceof Cliente) {
            excluirCliente(this.clienteSelecionado);
        } else {
            JOptionPane.showMessageDialog(this, "Selecione um cliente para efetivar  a operação");
        }
    }//GEN-LAST:event_btnExcluirActionPerformed

    private void excluirCliente(Cliente cliente) {
        if (JOptionPane.showConfirmDialog(this, "Confirma a exclusão do cliente?", "Confirmação", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            if (!new OADCliente().remove(cliente)) {
                JOptionPane.showMessageDialog(this, "Não foi possível Excluir! Verifique se existem pedidos ativos para esse Cliente.", "", JOptionPane.ERROR_MESSAGE);
            } else {
                atualizarGridClientes();
            }
        }
    }

    private void pesquisaCliente(String nome) {
        if ((nome != null) && !nome.trim().isEmpty()) {
            Cliente cliente = new Cliente();
            cliente.setNomeRazaoSocial(nome.trim());
            consultarCliente(cliente);
        } else {
            atualizarGridClientes();
        }
    }

    private void pesquisaCliente(Integer codigo) {
        if (codigo != null) {
            Cliente cliente = new Cliente();
            cliente.setCodigo(codigo);
            consultarCliente(cliente);
        } else {
            atualizarGridClientes();
        }
    }

    private void btnNovoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNovoActionPerformed
        Principal.TELA_PRINCIPAL.abrirJanelaCliente(telaCarregada, new Cliente(), true).addInternalFrameListener(new InternalFrameAdapter() {
            @Override
            public void internalFrameClosing(InternalFrameEvent ife) {
                atualizarGridClientes();
                super.internalFrameClosing(ife);
            }
        });
    }//GEN-LAST:event_btnNovoActionPerformed

    private void gridConsultaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_gridConsultaMouseClicked
        if ((evt.getClickCount() == 2) && (telaChamadora != null)) {
            selecionarItemGrid();
        }
    }//GEN-LAST:event_gridConsultaMouseClicked

    private void txtCodClienteKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCodClienteKeyReleased
        JTextField t = (JTextField) evt.getSource();
        t.setText(t.getText().replaceAll("[^0-9]", ""));        // TODO add your handling code here:
    }//GEN-LAST:event_txtCodClienteKeyReleased

    private void btnSelecionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelecionarActionPerformed
        this.selecionarItemGrid();
    }//GEN-LAST:event_btnSelecionarActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    javax.swing.JButton btnAlterar;
    javax.swing.JButton btnExcluir;
    javax.swing.JButton btnNovo;
    javax.swing.JButton btnSelecionar;
    javax.swing.JTable gridConsulta;
    javax.swing.JLabel jLabel10;
    javax.swing.JLabel jLabel4;
    javax.swing.JPanel jPanel1;
    javax.swing.JPanel jPanel2;
    javax.swing.JScrollPane jScrollPane1;
    javax.swing.JSeparator jSeparator2;
    javax.swing.JTextField txtCodCliente;
    javax.swing.JTextField txtNomeCliente;
    // End of variables declaration//GEN-END:variables

    private void limparCampos() {
        txtCodCliente.setText(null);
        txtNomeCliente.setText(null);
    }

    public void consultarCliente(Cliente cliente) {
        if (!(cliente instanceof Cliente)) {
            this.atualizarGridClientes();
        } else if (cliente.getCodigo() instanceof Integer) {
            this.atualizarGridClientes(new OADCliente().listaAtivos(cliente.getCodigo(), true));
        } else if (cliente.getNomeRazaoSocial() instanceof String) {
            this.atualizarGridClientes(new OADCliente().listaPeloNome(cliente.getNomeRazaoSocial()));
        } else {
            JOptionPane.showMessageDialog(this, "É necessário informar o código ou nome/razão social.", "", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    private void atualizarGridClientes(Cliente cliente, Boolean adicionar) {
        if (!adicionar) {
            this.clientes = new ArrayList<Cliente>();
        }
        this.clientes.add(cliente);
        this.atualizarGridClientes(this.clientes);
    }

    private void atualizarGridClientes() {
        this.atualizarGridClientes(new OADCliente().carregaTodos());
    }

    private void atualizarGridClientes(List<Cliente> clientes) {
        this.clientes = clientes;
        this.gridConsulta.removeAll();
        this.tmConsultaCliente.setRowCount(0);
        for (Cliente cliente : clientes) {
            tmConsultaCliente.addRow(cliente);
        }
    }

    private void selecionarItemGrid() {
        Cliente c = new Cliente();
        c.setCodigo(Integer.valueOf(tmConsultaCliente.getValueAt(gridConsulta.getSelectedRow(), 0).toString()));
        c = new OADCliente().carrega(c);
        telaChamadora.setClienteSelecionado(c);
        telaCarregada.dispose();

    }

    private MyTableModel<Cliente> construirTableModel() {
        this.tmConsultaCliente = new MyTableModel<Cliente>() {
            @Override
            public void addRow(Cliente objeto) {
                this.addRow(new String[]{
                    objeto.getCodigo().toString(),
                    objeto.getNomeRazaoSocial(),
                    objeto.getCpfCnpj(),
                    objeto.getNomeContato(),
                    objeto.getTelefone()
                });
            }

            @Override
            public boolean isCellEditable(int i, int i1) {
                return false;
            }
        };
        this.tmConsultaCliente.setColumnIdentifiers(new String[]{
            "Código",
            "Nome/Razão social",
            "CPF/CNPJ",
            "Nome de contato",
            "Telefone"
        });
        return this.tmConsultaCliente;
    }
}