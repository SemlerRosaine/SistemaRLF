/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package sistemarlf.visualizacao.produto;

import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.InternalFrameAdapter;
import javax.swing.event.InternalFrameEvent;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import sistemarlf.Principal;
import sistemarlf.modelo.entidades.cliente.Cliente;
import sistemarlf.modelo.entidades.produto.Produto;
import sistemarlf.modelo.oad.produto.OADProduto;
import sistemarlf.visualizacao.pedido.FormCadPedido;
import uteis.grid.tablemodel.MyTableModel;

/**
 *
 * @author Wine
 */
public class FormConsultaProduto extends javax.swing.JPanel {

    FormCadPedido telaChamadora;
    JInternalFrame telaCarregada;
    MyTableModel<Produto> tmConsultaProduto;
    List<Produto> produtos;
    private Produto produtoSelecionado;

    public FormConsultaProduto() {
        super();
        initComponents();
        this.btnExcluir.setEnabled(false);
        this.btnAlterar.setEnabled(false);
        this.gridConsulta.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent lse) {
                if (!gridConsulta.getSelectionModel().isSelectionEmpty()) {
                    produtoSelecionado = produtos.get(gridConsulta.getSelectedRow());
                } else {
                    produtoSelecionado = null;
                }
                btnExcluir.setEnabled(produtoSelecionado instanceof Produto);
                btnAlterar.setEnabled(produtoSelecionado instanceof Produto);
            }
        });
        this.gridConsulta.addFocusListener(new FocusAdapter() {
            @Override
            public void focusLost(FocusEvent fe) {
                gridConsulta.clearSelection();
            }
        });
        this.gridConsulta.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent me) {
                if (me.getButton() == MouseEvent.BUTTON3) {
                    gridConsulta.clearSelection();
                }
                super.mouseClicked(me);
            }
        });

        /*
         * VERIFICAÇÃO DOS CAMPOS DE PESQUISA PARA HABILITAR/DESABILITAR O 
         * BOTÃO DE "PESQUISAR".
         */
        this.txtCodProdPedido.addCaretListener(new CaretListener() {
            @Override
            public void caretUpdate(CaretEvent ce) {
                pesquisaProduto((!txtCodProdPedido.getText().trim().isEmpty()) ? Integer.parseInt(txtCodProdPedido.getText().trim()) : null);
            }
        });
        this.txtDescProdPedido.addCaretListener(new CaretListener() {
            @Override
            public void caretUpdate(CaretEvent ce) {
                pesquisaProduto((!txtDescProdPedido.getText().trim().isEmpty()) ? txtDescProdPedido.getText().trim() : null);
            }
        });
    }

    /**
     * Creates new form ProtCadastraCliente
     */
    public FormConsultaProduto(JInternalFrame jfCarregada, FormCadPedido jfChamadora, Produto p) {
        telaCarregada = jfCarregada;
        telaChamadora = jfChamadora;
        consultarProduto(p);
        if (telaChamadora != null) {
            if (tmConsultaProduto.getRowCount() == 1) {
                p = new OADProduto().CarregaPelaReferencia(p);
                if ((p.getAtivo() == null) || (p.getAtivo())) {
                    telaChamadora.setProdutoSelecionado(p);
                } else {
                    p = null;
                    consultarProduto(p);
                    btnFechar.setText("Selecionar");
                    JOptionPane.showMessageDialog(this, "Produto Inativo! Favor selecionar produtos ativos!!", "", JOptionPane.INFORMATION_MESSAGE);
                }

            } else {
                if (p.getCodigo() != null && !p.getCodigo().equals(0)) {
                    txtCodProdPedido.setText(p.getCodigo().toString());
                }
                txtDescProdPedido.setText(p.getDescricao());
                btnFechar.setText("Selecionar");
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        txtCodProdPedido = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        txtDescProdPedido = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        gridConsulta = new javax.swing.JTable();
        btnFechar = new javax.swing.JButton();
        btnExcluir = new javax.swing.JButton();
        btnNovo = new javax.swing.JButton();
        btnAlterar = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();

        setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        setAutoscrolls(true);
        setMaximumSize(new java.awt.Dimension(0, 0));
        setMinimumSize(new java.awt.Dimension(700, 500));
        setName("ProtCadastraCliente"); // NOI18N
        setPreferredSize(new java.awt.Dimension(700, 500));
        setVerifyInputWhenFocusTarget(false);

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("sistemarlf/visualizacao/produto/Bundle"); // NOI18N
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("FormConsultaProduto.jPanel1.border.title"))); // NOI18N
        jPanel1.setMaximumSize(new java.awt.Dimension(750, 400));
        jPanel1.setPreferredSize(new java.awt.Dimension(750, 300));

        jLabel4.setText(bundle.getString("FormConsultaProduto.jLabel4.text")); // NOI18N

        txtCodProdPedido.setText(bundle.getString("FormConsultaProduto.txtCodProdPedido.text")); // NOI18N
        txtCodProdPedido.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCodProdPedidoKeyReleased(evt);
            }
        });

        jLabel10.setText(bundle.getString("FormConsultaProduto.jLabel10.text")); // NOI18N

        txtDescProdPedido.setText(bundle.getString("FormConsultaProduto.txtDescProdPedido.text")); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addGap(4, 4, 4)
                .addComponent(txtCodProdPedido, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtDescProdPedido, javax.swing.GroupLayout.DEFAULT_SIZE, 395, Short.MAX_VALUE)
                .addGap(95, 95, 95))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(jLabel4))
                    .addComponent(txtCodProdPedido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel10))
                    .addComponent(txtDescProdPedido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel2.setLayout(new java.awt.BorderLayout());

        gridConsulta.setAutoCreateRowSorter(true);
        tmConsultaProduto = construirTableModel();
        gridConsulta.setModel(this.construirTableModel());
        gridConsulta.setAutoscrolls(false);
        gridConsulta.setEditingRow(0);
        gridConsulta.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        gridConsulta.getTableHeader().setReorderingAllowed(false);
        gridConsulta.setCellSelectionEnabled(false);
        gridConsulta.setRowSelectionAllowed(true);
        gridConsulta.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                gridConsultaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(gridConsulta);
        gridConsulta.getColumnModel().getColumn(0).setPreferredWidth(20);
        gridConsulta.getColumnModel().getColumn(1).setPreferredWidth(300);
        gridConsulta.getColumnModel().getColumn(2).setPreferredWidth(20);
        gridConsulta.getColumnModel().getColumn(3).setPreferredWidth(20);
        gridConsulta.getColumnModel().getColumn(4).setPreferredWidth(20);

        jPanel2.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        btnFechar.setText(bundle.getString("FormConsultaProduto.btnFechar.text")); // NOI18N
        btnFechar.setFocusable(false);
        btnFechar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnFechar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnFechar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFecharActionPerformed(evt);
            }
        });

        btnExcluir.setText(bundle.getString("FormConsultaProduto.btnExcluir.text")); // NOI18N
        btnExcluir.setFocusable(false);
        btnExcluir.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnExcluir.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirActionPerformed(evt);
            }
        });

        btnNovo.setText(bundle.getString("FormConsultaProduto.btnNovo.text")); // NOI18N
        btnNovo.setFocusable(false);
        btnNovo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnNovo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnNovo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNovoActionPerformed(evt);
            }
        });

        btnAlterar.setText(bundle.getString("FormConsultaProduto.btnAlterar.text")); // NOI18N
        btnAlterar.setFocusable(false);
        btnAlterar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnAlterar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnAlterar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAlterarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 678, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 678, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnFechar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnNovo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnExcluir)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAlterar))
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 353, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnFechar)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(btnAlterar)
                        .addComponent(btnExcluir)
                        .addComponent(btnNovo)))
                .addGap(10, 10, 10))
        );

        getAccessibleContext().setAccessibleName(bundle.getString("FormConsultaProduto.AccessibleContext.accessibleName")); // NOI18N
    }// </editor-fold>//GEN-END:initComponents

    private void btnFecharActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFecharActionPerformed
        if (telaChamadora != null) {
            selecionarItemGrid();
        } else {
            telaCarregada.dispose();
        }
    }//GEN-LAST:event_btnFecharActionPerformed

    private void btnAlterarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAlterarActionPerformed
        // TODO add your handling code here:
       
        if (this.produtoSelecionado instanceof Produto) {
            Principal.TELA_PRINCIPAL.abrirJanelaProduto(this.telaCarregada, this.produtoSelecionado,true).addInternalFrameListener(new InternalFrameAdapter() {
            @Override
                public void internalFrameClosed(InternalFrameEvent ife) {
                    atualizarGridProduto();
                    super.internalFrameClosed(ife);
                }
            });
        } else {
          JOptionPane.showInputDialog("Selecione um produto para efetivar  a operação");
        }



    }//GEN-LAST:event_btnAlterarActionPerformed
    private void excluirProduto(Produto produto){
        if (JOptionPane.showConfirmDialog(this, "Confirma a exclusão do produto?", "Confirmação", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            if (!new OADProduto().remove(produto)) {
                JOptionPane.showMessageDialog(this, "Não foi possível Excluir! Verifique se existem pedidos ativos para esse Produto.", "", JOptionPane.ERROR_MESSAGE);
            } else {
                atualizarGridProduto();
            }
        }
    }
    private void btnExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirActionPerformed
        // TODO add your handling code here:
        if (this.produtoSelecionado instanceof Produto) {
            excluirProduto(this.produtoSelecionado);
        } else {
            JOptionPane.showMessageDialog(this, "Selecione um produto para efetivar  a operação");
        }

    }//GEN-LAST:event_btnExcluirActionPerformed
    private void pesquisaProduto(String descricao) {
        if (descricao != null && !descricao.trim().isEmpty()) {
            Produto produto = new Produto();
            produto.setDescricao(descricao.trim());
            consultarProduto(produto);

        } else {
            atualizarGridProduto();
        }
    }

    private void pesquisaProduto(Integer codigo) {
        if (codigo != null) {
            Produto produto = new Produto();
            produto.setCodigoReferencia(codigo);
            consultarProduto(produto);
        } else {
            atualizarGridProduto();
        }
    }

    private void btnNovoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNovoActionPerformed

        Principal.TELA_PRINCIPAL.abrirJanelaProduto(telaCarregada, new Produto(), false);
    }//GEN-LAST:event_btnNovoActionPerformed

    private void gridConsultaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_gridConsultaMouseClicked
        if ((evt.getClickCount() == 2) && (telaChamadora != null)) {
            selecionarItemGrid();
        }
    }//GEN-LAST:event_gridConsultaMouseClicked

    private void txtCodProdPedidoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCodProdPedidoKeyReleased
        JTextField t = (JTextField) evt.getSource();
        t.setText(t.getText().replaceAll("[^0-9]", ""));        // TODO add your handling code here:
    }//GEN-LAST:event_txtCodProdPedidoKeyReleased
    // Variables declaration - do not modify//GEN-BEGIN:variables
    javax.swing.JButton btnAlterar;
    javax.swing.JButton btnExcluir;
    javax.swing.JButton btnFechar;
    javax.swing.JButton btnNovo;
    javax.swing.JTable gridConsulta;
    javax.swing.JLabel jLabel10;
    javax.swing.JLabel jLabel4;
    javax.swing.JPanel jPanel1;
    javax.swing.JPanel jPanel2;
    javax.swing.JScrollPane jScrollPane1;
    javax.swing.JSeparator jSeparator1;
    javax.swing.JTextField txtCodProdPedido;
    javax.swing.JTextField txtDescProdPedido;
    // End of variables declaration//GEN-END:variables

    private void limparCampos() {
        txtCodProdPedido.setText(null);
        txtDescProdPedido.setText(null);
    }

    public void consultarProduto(Produto p) {
        tmConsultaProduto.setRowCount(0);

        if ((p == null) || ((p.getCodigoReferencia() == null || p.getCodigoReferencia().equals(0)) && p.getDescricao().trim().isEmpty())) {
            List<Produto> lp = new OADProduto().carregaTodos();
            for (int i = 0; i < lp.size(); i++) {
                tmConsultaProduto.addRow(lp.get(i).getLinha());
            }
        } else {
            if (p.getCodigoReferencia() == null) {
                if (p.getDescricao().trim().isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Necessário Informar Código ou Descrição!", "", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    List<Produto> lp = new OADProduto().ListaPeloNome(p.getDescricao());
                    for (int i = 0; i < lp.size(); i++) {
                        tmConsultaProduto.addRow(lp.get(i).getLinha());
                    }
                }
            } else {
                p = new OADProduto().CarregaPelaReferencia(p);
                if (p != null) {
                    tmConsultaProduto.addRow(p.getLinha());
                } else {
                    List<Produto> lp = new OADProduto().carregaTodos();
                    for (int i = 0; i < lp.size(); i++) {
                        tmConsultaProduto.addRow(lp.get(i).getLinha());
                    }
                }
            }

        }


    }

    private void selecionarItemGrid() {
        Produto p = new Produto();
        p.setCodigoReferencia(Integer.valueOf(tmConsultaProduto.getValueAt(gridConsulta.getSelectedRow(), 0).toString()));
        p = new OADProduto().CarregaPelaReferencia(p);
        if ((p.getAtivo() == null) || (p.getAtivo())) {
            telaChamadora.setProdutoSelecionado(p);
            telaCarregada.dispose();
        } else {
            txtCodProdPedido.setText("");
            txtDescProdPedido.setText("");
            p = null;
            consultarProduto(p);
            JOptionPane.showMessageDialog(this, "Produto Inativo! Favor selecionar produtos ativos!!", "", JOptionPane.INFORMATION_MESSAGE);
        }


    }

    private void atualizarGridProduto(Produto produto, Boolean adicionar) {
        if (!adicionar) {
            this.produtos = new ArrayList<Produto>();
        }
        this.produtos.add(produto);
        this.atualizarGridProduto(this.produtos);
    }

    private void atualizarGridProduto() {
        this.atualizarGridProduto(new OADProduto().carregaTodos());
    }

    private void atualizarGridProduto(List<Produto> produtos) {
        this.produtos = produtos;
        this.gridConsulta.removeAll();
        this.tmConsultaProduto.setRowCount(0);
        for (Produto produto : produtos) {
            tmConsultaProduto.addRow(produto);
        }
    }
     private MyTableModel<Produto> construirTableModel() {
        this.tmConsultaProduto = new MyTableModel<Produto>() {
            @Override
            public void addRow(Produto objeto) {
                this.addRow(new String[]{
                    objeto.getCodigoReferencia().toString(),
                    objeto.getDescricao(),
                    objeto.getValorCustoFormatado(),
                    objeto.getValorVendaFormatado(),
                    objeto.getCaracteristicas(WIDTH).toString()
                });
            }

            @Override
            public boolean isCellEditable(int i, int i1) {
                return false;
            }

            
        };
        this.tmConsultaProduto.setColumnIdentifiers(new String[]{
            "Código Referencia",
            "Descrição",
            "Valor Custo",
            "Valor Venda",
            "Caracteristicas"
        });
        return this.tmConsultaProduto;
    }
}
